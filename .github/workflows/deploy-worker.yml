name: Deploy ChittyRegistry Worker

on:
  push:
    branches:
      - main
    paths:
      - 'src/universal-registry-worker.js'
      - 'wrangler.toml'
      - '.github/workflows/deploy-worker.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

jobs:
  validate:
    name: Validate Worker Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate wrangler configuration
        run: npx wrangler deploy --dry-run --outdir=./dist
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Check worker syntax
        run: node -c src/universal-registry-worker.js

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://chittyregistry-staging.chitty.workers.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Cloudflare Workers (Staging)
        run: npm run deploy:staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Health check (Staging)
        run: |
          sleep 5
          response=$(curl -s https://chittyregistry-staging.chitty.workers.dev/health)
          echo "Health check response: $response"
          echo "$response" | jq -e '.status == "HEALTHY"'

      - name: Comment on commit
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: '‚úÖ Deployed to staging: https://chittyregistry-staging.chitty.workers.dev'
            })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://registry.chitty.cc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Cloudflare Workers (Production)
        run: npm run deploy:production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Health check (Production)
        run: |
          sleep 5
          response=$(curl -s https://registry.chitty.cc/health)
          echo "Health check response: $response"
          echo "$response" | jq -e '.status == "HEALTHY"'

      - name: Verify route configuration
        run: |
          response=$(curl -s -H "Host: registry.chitty.cc" https://registry.chitty.cc/health)
          echo "$response" | jq -e '.service == "chittyregistry-universal"'

      - name: Create deployment tag
        run: |
          git tag -a "deploy-$(date +%Y%m%d-%H%M%S)" -m "Production deployment"
          git push origin --tags

      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'üöÄ Deployed to production: https://registry.chitty.cc\n\nVersion: 2.0.0\nDeployment: chittyregistry-production'
            })

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    steps:
      - name: Notify rollback required
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: '‚ö†Ô∏è Production deployment failed. Manual rollback may be required.\n\nRun: `wrangler rollback --env production`'
            })
